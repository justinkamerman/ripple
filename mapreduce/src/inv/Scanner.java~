/* The following code was generated by JFlex 1.4.3 on 09/08/11 3:17 PM */

/**
 * $Id: Main.java 97 2011-03-04 19:55:28Z justinkamerman $ 
 *
 * $LastChangedDate: 2011-03-04 15:55:28 -0400 (Fri, 04 Mar 2011) $ 
 * 
 * $LastChangedBy: justinkamerman $
 */
package inv;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 09/08/11 3:17 PM from the specification file
 * <tt>/home/justin/hadoop/work/ncdc/src/inv/Scanner.flex</tt>
 */
class Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\0\66\0\1\2\1\3\1\11\1\22\1\10\1\14\1\15"+
    "\1\24\1\16\1\30\1\26\1\20\1\21\1\17\1\4\1\27\1\32"+
    "\1\12\1\13\1\6\1\5\1\7\1\25\1\31\1\23\1\1\6\0"+
    "\1\2\1\3\1\11\1\22\1\10\1\14\1\15\1\24\1\16\1\30"+
    "\1\26\1\20\1\21\1\17\1\4\1\27\1\32\1\12\1\13\1\6"+
    "\1\5\1\7\1\25\1\31\1\23\1\1\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\32\1\4\2\1\1\2\2\1\1\6\2\1\1"+
    "\4\2\3\1\2\2\1\1\1\2\1\1\1\2\1\1"+
    "\20\2\1\1\15\2\1\1\3\2\2\1\1\2\1\1"+
    "\11\2\4\1\6\2\1\1\3\2\1\1\20\2\2\1"+
    "\1\2\1\1\25\2\1\1\1\2\1\1\2\2\1\1"+
    "\5\2\1\1\7\2\1\1\13\2\1\1\15\2\1\1"+
    "\4\2\2\1\7\2\1\1\5\2\1\1\1\2\2\1"+
    "\5\2\1\1\7\2\1\1\23\2\1\1\4\2\2\1"+
    "\13\2\1\1\10\2\1\1\4\2\1\1\2\2\1\1"+
    "\14\2\1\1\5\2\1\1\3\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[319];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\33\0\66\0\121\0\154\0\207\0\242\0\275"+
    "\0\330\0\363\0\u010e\0\u0129\0\u0144\0\u015f\0\u017a\0\u0195"+
    "\0\u01b0\0\u01cb\0\u01e6\0\u0201\0\u021c\0\u0237\0\u0252\0\u026d"+
    "\0\u0288\0\u02a3\0\u02be\0\66\0\u02d9\0\u02f4\0\u030f\0\u032a"+
    "\0\u0345\0\u0360\0\u037b\0\u0396\0\u03b1\0\u03cc\0\u03e7\0\u0402"+
    "\0\u041d\0\u0438\0\u0453\0\u046e\0\u0489\0\u04a4\0\u04bf\0\u04da"+
    "\0\u04f5\0\u0510\0\u052b\0\u0546\0\u0561\0\u057c\0\u0597\0\u05b2"+
    "\0\u05cd\0\u05e8\0\u0603\0\u061e\0\u0639\0\u0654\0\u066f\0\u068a"+
    "\0\u06a5\0\u06c0\0\u06db\0\u06f6\0\u0711\0\u072c\0\u0747\0\u0762"+
    "\0\u077d\0\u0798\0\u07b3\0\u07ce\0\u07e9\0\u0804\0\u081f\0\u083a"+
    "\0\u0855\0\u0870\0\u088b\0\u08a6\0\u08c1\0\u08dc\0\u08f7\0\u0912"+
    "\0\u092d\0\u0948\0\u0963\0\u097e\0\u0999\0\u09b4\0\u09cf\0\u09ea"+
    "\0\u0a05\0\u0a20\0\u0a3b\0\u0a56\0\u0a71\0\u0a8c\0\u0aa7\0\u0ac2"+
    "\0\u0add\0\u0af8\0\u0b13\0\u0b2e\0\u0b49\0\u0b64\0\u0b7f\0\u0b9a"+
    "\0\u0bb5\0\u0bd0\0\u0beb\0\u0c06\0\u0c21\0\u0c3c\0\u0c57\0\u0c72"+
    "\0\u0c8d\0\u0ca8\0\u0cc3\0\u0cde\0\u0cf9\0\u0d14\0\u0d2f\0\u0d4a"+
    "\0\u0d65\0\u0d80\0\u0d9b\0\u0db6\0\u0dd1\0\u0dec\0\u0e07\0\u0e22"+
    "\0\u0e3d\0\u0e58\0\u0e73\0\u0e8e\0\u0ea9\0\u0ec4\0\u0edf\0\u0efa"+
    "\0\u0f15\0\u032a\0\u0f30\0\u0f4b\0\u0f66\0\u0f81\0\u0f9c\0\u0fb7"+
    "\0\u0fd2\0\u0fed\0\u1008\0\u1023\0\u103e\0\u1059\0\u1074\0\u108f"+
    "\0\u10aa\0\u10c5\0\u10e0\0\u10fb\0\u1116\0\u1131\0\u114c\0\u1167"+
    "\0\u1182\0\u0add\0\u119d\0\u11b8\0\u11d3\0\u11ee\0\u1209\0\u1224"+
    "\0\u123f\0\u125a\0\u1275\0\u1290\0\u12ab\0\u12c6\0\u12e1\0\u12fc"+
    "\0\u1317\0\u1332\0\u134d\0\u1368\0\u1383\0\u139e\0\u13b9\0\u13d4"+
    "\0\u13ef\0\u140a\0\u1425\0\u1440\0\u145b\0\u1476\0\u1491\0\u14ac"+
    "\0\u14c7\0\u14e2\0\u14fd\0\u1518\0\u1533\0\u154e\0\u1569\0\u1584"+
    "\0\u159f\0\u15ba\0\u15d5\0\u15f0\0\u160b\0\u1626\0\u108f\0\u1641"+
    "\0\u165c\0\u1677\0\u0f15\0\u1692\0\u16ad\0\u1533\0\u16c8\0\u16e3"+
    "\0\u16fe\0\u1719\0\u1734\0\u174f\0\u176a\0\u1785\0\u17a0\0\u17bb"+
    "\0\u17d6\0\u17f1\0\u180c\0\u1827\0\u1842\0\u185d\0\u1878\0\u1893"+
    "\0\u18ae\0\u18c9\0\u18e4\0\u18ff\0\u191a\0\u1935\0\u1950\0\u196b"+
    "\0\u15ba\0\u15d5\0\u1986\0\u19a1\0\u19bc\0\u19d7\0\u19f2\0\u1a0d"+
    "\0\u1a28\0\u1a43\0\u1a5e\0\u1a79\0\u1a94\0\u0f66\0\u1aaf\0\u1aca"+
    "\0\u1ae5\0\u1b00\0\u1b1b\0\u11ee\0\u1b36\0\u1b51\0\u1b6c\0\u1b87"+
    "\0\u1ba2\0\u1bbd\0\u1bd8\0\u1bf3\0\u1c0e\0\u1c29\0\u1c44\0\u1c5f"+
    "\0\u1c7a\0\u1c95\0\u1cb0\0\u1ccb\0\u1ce6\0\u1d01\0\u1d1c\0\u1d37"+
    "\0\u1d52\0\u1d6d\0\u1d88\0\u1da3\0\u1dbe\0\u0d80\0\u1dd9\0\u1df4"+
    "\0\u1e0f\0\u1e2a\0\u1e45\0\u1e60\0\u1e7b\0\u1e96\0\u1eb1\0\u1ecc"+
    "\0\u1ee7\0\u1f02\0\u1f1d\0\u1f38\0\u1f53\0\u0d14\0\u1f6e\0\u1f89"+
    "\0\u1fa4\0\u1fbf\0\u1fda\0\u1ff5\0\u2010\0\u202b\0\u2046";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[319];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\3\1\33\34\0\32\34\1\0\2\34\1\35"+
    "\2\34\1\3\2\34\1\36\1\37\1\40\1\41\1\42"+
    "\1\34\1\43\1\44\1\45\3\34\1\46\5\34\1\0"+
    "\1\34\1\47\1\34\1\50\1\51\2\34\1\52\5\34"+
    "\1\53\4\34\1\3\7\34\1\0\4\34\1\54\1\55"+
    "\1\56\2\34\1\57\1\34\1\60\2\34\1\61\1\62"+
    "\6\34\1\63\3\34\1\0\12\34\1\64\3\34\1\65"+
    "\7\34\1\66\3\34\1\0\1\34\1\67\1\34\1\70"+
    "\1\71\16\34\1\72\1\73\5\34\1\0\7\34\1\74"+
    "\22\34\1\0\1\34\1\75\4\34\1\76\6\34\1\77"+
    "\1\100\13\34\1\0\1\34\1\101\1\34\1\102\3\34"+
    "\1\103\7\34\1\104\12\34\1\0\1\34\1\77\1\34"+
    "\1\105\3\34\1\106\5\34\1\107\14\34\1\0\1\34"+
    "\1\110\1\34\1\111\1\112\1\113\1\34\1\114\5\34"+
    "\1\115\2\34\1\116\2\34\1\117\6\34\1\0\1\34"+
    "\1\120\1\34\1\121\1\122\2\34\1\123\1\34\1\124"+
    "\3\34\1\125\14\34\1\0\1\34\1\126\1\34\1\127"+
    "\3\34\1\130\1\34\1\131\3\34\1\132\14\34\1\0"+
    "\5\34\1\133\4\34\2\3\2\34\1\134\1\34\1\135"+
    "\11\34\1\0\3\34\1\136\1\137\2\34\1\140\22\34"+
    "\1\0\1\34\1\141\1\34\1\142\3\34\1\143\5\34"+
    "\1\144\14\34\1\0\1\34\1\145\1\34\1\146\1\147"+
    "\2\34\1\150\1\34\1\151\3\34\1\107\4\34\1\152"+
    "\7\34\1\0\3\34\1\153\1\154\10\34\1\155\14\34"+
    "\1\0\3\34\1\156\3\34\1\157\22\34\1\0\1\34"+
    "\1\160\1\34\1\161\3\34\1\162\5\34\1\163\14\34"+
    "\1\0\1\34\1\164\1\34\1\165\3\34\1\166\5\34"+
    "\1\167\5\34\1\170\6\34\1\0\7\34\1\171\5\34"+
    "\1\172\1\173\13\34\1\0\1\34\1\174\1\34\1\175"+
    "\1\176\2\34\1\177\1\34\1\200\5\34\1\201\12\34"+
    "\1\0\4\34\1\202\25\34\1\0\4\34\1\203\25\34"+
    "\1\0\3\34\1\204\26\34\1\0\11\34\1\205\20\34"+
    "\1\0\3\34\1\206\3\34\1\207\22\34\1\0\25\34"+
    "\1\210\4\34\1\0\5\34\1\56\24\34\1\0\1\34"+
    "\1\211\30\34\1\0\3\34\1\77\15\34\1\3\1\212"+
    "\7\34\1\0\3\34\1\213\1\34\1\214\3\34\1\215"+
    "\1\73\4\34\1\3\1\216\3\34\1\217\5\34\1\0"+
    "\3\34\1\220\26\34\1\0\1\34\1\221\30\34\1\0"+
    "\10\34\1\222\21\34\1\0\5\34\1\223\24\34\1\0"+
    "\5\34\1\3\24\34\1\0\5\34\1\224\1\34\1\225"+
    "\1\226\1\34\1\51\1\227\1\230\1\231\5\34\1\232"+
    "\6\34\1\0\14\34\1\3\15\34\1\0\5\34\1\3"+
    "\3\34\1\3\20\34\1\0\23\34\1\233\6\34\1\0"+
    "\7\34\1\234\22\34\1\0\21\34\1\235\10\34\1\0"+
    "\5\34\1\236\5\34\1\3\16\34\1\0\7\34\1\3"+
    "\1\237\6\34\1\221\12\34\1\0\21\34\1\240\10\34"+
    "\1\0\7\34\1\241\22\34\1\0\7\34\1\242\22\34"+
    "\1\0\5\34\1\243\13\34\1\56\10\34\1\0\3\34"+
    "\1\225\26\34\1\0\25\34\1\244\4\34\1\0\3\34"+
    "\1\245\10\34\1\246\4\34\1\46\2\34\1\247\5\34"+
    "\1\0\11\34\1\241\20\34\1\0\1\34\1\250\1\34"+
    "\1\251\1\252\2\34\1\253\1\34\1\254\3\34\1\255"+
    "\14\34\1\0\3\34\1\3\26\34\1\0\11\34\1\221"+
    "\20\34\1\0\10\34\1\223\1\256\20\34\1\0\7\34"+
    "\1\257\22\34\1\0\5\34\1\260\24\34\1\0\3\34"+
    "\1\261\15\34\1\210\10\34\1\0\12\34\1\262\3\34"+
    "\1\263\1\34\1\237\11\34\1\0\4\34\1\264\13\34"+
    "\1\237\11\34\1\0\11\34\1\265\20\34\1\0\7\34"+
    "\1\266\22\34\1\0\3\34\1\267\26\34\1\0\1\34"+
    "\1\270\30\34\1\0\14\34\1\271\15\34\1\0\15\34"+
    "\1\272\2\34\1\237\1\34\1\151\1\34\1\3\5\34"+
    "\1\0\20\34\1\273\11\34\1\0\10\34\1\223\1\237"+
    "\20\34\1\0\1\34\1\274\13\34\1\275\14\34\1\0"+
    "\6\34\1\276\1\277\1\300\21\34\1\0\16\34\1\301"+
    "\2\34\1\262\10\34\1\0\1\34\1\302\30\34\1\0"+
    "\1\34\1\275\1\34\1\303\3\34\1\3\22\34\1\0"+
    "\10\34\1\304\1\3\20\34\1\0\4\34\1\234\4\34"+
    "\1\3\20\34\1\0\11\34\1\305\5\34\1\306\12\34"+
    "\1\0\17\34\1\51\4\34\1\3\5\34\1\0\3\34"+
    "\1\307\26\34\1\0\11\34\1\202\4\34\1\310\13\34"+
    "\1\0\6\34\1\237\23\34\1\0\3\34\1\310\1\34"+
    "\1\3\7\34\1\220\14\34\1\0\5\34\1\151\10\34"+
    "\1\311\13\34\1\0\3\34\1\312\3\34\1\313\22\34"+
    "\1\0\6\34\1\314\23\34\1\0\12\34\1\315\17\34"+
    "\1\0\5\34\1\316\24\34\1\0\26\34\1\317\3\34"+
    "\1\0\2\34\1\320\1\321\1\34\1\322\10\34\1\3"+
    "\5\34\1\323\5\34\1\0\20\34\1\324\11\34\1\0"+
    "\6\34\1\56\1\325\1\326\13\34\1\240\3\34\1\51"+
    "\1\34\1\0\5\34\1\327\3\34\1\330\1\51\17\34"+
    "\1\0\16\34\1\331\13\34\1\0\1\34\1\202\3\34"+
    "\1\151\4\34\1\252\17\34\1\0\25\34\1\332\4\34"+
    "\1\0\16\34\1\333\2\34\1\237\1\3\2\34\1\334"+
    "\4\34\1\0\11\34\1\237\1\335\17\34\1\0\10\34"+
    "\1\223\1\34\1\51\17\34\1\0\16\34\1\3\1\34"+
    "\1\324\11\34\1\0\12\34\1\3\17\34\1\0\12\34"+
    "\1\336\17\34\1\0\7\34\1\252\6\34\1\237\5\34"+
    "\1\241\5\34\1\0\11\34\1\337\20\34\1\0\13\34"+
    "\1\340\5\34\1\3\10\34\1\0\4\34\1\341\25\34"+
    "\1\0\1\34\1\342\3\34\1\3\24\34\1\0\6\34"+
    "\1\334\3\34\1\3\6\34\1\3\10\34\1\0\24\34"+
    "\1\343\5\34\1\0\11\34\1\344\20\34\1\0\12\34"+
    "\1\3\1\34\1\345\3\34\1\152\11\34\1\0\12\34"+
    "\1\3\3\34\1\346\3\34\1\151\7\34\1\0\4\34"+
    "\1\264\4\34\1\222\20\34\1\0\11\34\1\237\4\34"+
    "\1\51\1\347\12\34\1\0\5\34\1\350\11\34\1\351"+
    "\12\34\1\0\1\34\1\51\1\34\1\352\3\34\1\353"+
    "\5\34\1\354\4\34\1\3\7\34\1\0\7\34\1\355"+
    "\22\34\1\0\16\34\1\272\13\34\1\0\3\34\1\356"+
    "\3\34\1\357\22\34\1\0\11\34\1\346\20\34\1\0"+
    "\12\34\1\360\2\34\1\361\14\34\1\0\5\34\1\151"+
    "\24\34\1\0\11\34\1\362\20\34\1\0\3\34\1\363"+
    "\3\34\1\364\22\34\1\0\1\34\1\365\30\34\1\0"+
    "\12\34\1\51\17\34\1\0\15\34\1\366\14\34\1\0"+
    "\4\34\1\51\1\34\1\237\23\34\1\0\3\34\1\367"+
    "\26\34\1\0\4\34\1\172\25\34\1\0\1\34\1\151"+
    "\30\34\1\0\7\34\1\272\2\34\1\3\2\34\1\220"+
    "\14\34\1\0\15\34\1\370\14\34\1\0\2\34\1\320"+
    "\1\321\1\34\1\371\16\34\1\372\5\34\1\0\16\34"+
    "\1\373\13\34\1\0\23\34\1\374\6\34\1\0\7\34"+
    "\1\375\22\34\1\0\3\34\1\202\26\34\1\0\1\34"+
    "\1\376\30\34\1\0\16\34\1\53\13\34\1\0\22\34"+
    "\1\3\7\34\1\0\23\34\1\3\6\34\1\0\5\34"+
    "\1\56\16\34\1\377\5\34\1\0\16\34\1\3\13\34"+
    "\1\0\1\34\1\u0100\1\34\1\u0101\26\34\1\0\3\34"+
    "\1\u0102\26\34\1\0\1\34\1\225\30\34\1\0\16\34"+
    "\1\u0103\13\34\1\0\15\34\1\172\14\34\1\0\7\34"+
    "\1\342\22\34\1\0\11\34\1\3\20\34\1\0\7\34"+
    "\1\u0104\22\34\1\0\7\34\1\225\22\34\1\0\7\34"+
    "\1\3\22\34\1\0\7\34\1\u0105\22\34\1\0\16\34"+
    "\1\210\13\34\1\0\12\34\1\3\6\34\1\3\10\34"+
    "\1\0\15\34\1\351\14\34\1\0\7\34\1\u0106\22\34"+
    "\1\0\25\34\1\3\4\34\1\0\7\34\1\77\22\34"+
    "\1\0\1\34\1\u0107\30\34\1\0\5\34\1\3\10\34"+
    "\1\3\13\34\1\0\4\34\1\u0108\5\34\1\237\17\34"+
    "\1\0\11\34\1\u0109\1\237\2\34\1\234\1\3\1\34"+
    "\1\3\1\34\1\3\7\34\1\0\3\34\1\261\3\34"+
    "\1\237\22\34\1\0\12\34\1\3\3\34\1\u010a\13\34"+
    "\1\0\17\34\1\221\12\34\1\0\11\34\1\u010b\4\34"+
    "\1\u010c\13\34\1\0\23\34\1\56\6\34\1\0\4\34"+
    "\1\u010d\25\34\1\0\7\34\1\151\22\34\1\0\16\34"+
    "\1\u010e\13\34\1\0\17\34\1\272\12\34\1\0\5\34"+
    "\1\u010f\24\34\1\0\1\34\1\u0110\30\34\1\0\20\34"+
    "\1\151\11\34\1\0\17\34\1\256\12\34\1\0\23\34"+
    "\1\51\6\34\1\0\21\34\1\3\10\34\1\0\7\34"+
    "\1\212\22\34\1\0\5\34\1\262\24\34\1\0\17\34"+
    "\1\351\12\34\1\0\7\34\1\u0111\22\34\1\0\12\34"+
    "\1\3\5\34\1\210\11\34\1\0\3\34\1\u0112\26\34"+
    "\1\0\10\34\1\237\21\34\1\0\17\34\1\u0113\12\34"+
    "\1\0\4\34\1\264\17\34\1\210\5\34\1\0\5\34"+
    "\1\151\1\34\1\151\22\34\1\0\5\34\1\u0114\24\34"+
    "\1\0\17\34\1\333\12\34\1\0\20\34\1\3\11\34"+
    "\1\0\21\34\1\151\10\34\1\0\7\34\1\u0115\22\34"+
    "\1\0\4\34\1\u0116\25\34\1\0\1\34\1\u0117\30\34"+
    "\1\0\7\34\1\u0118\22\34\1\0\7\34\1\u0119\22\34"+
    "\1\0\3\34\1\3\3\34\1\u011a\22\34\1\0\3\34"+
    "\1\u011b\26\34\1\0\3\34\1\u011c\26\34\1\0\16\34"+
    "\1\237\13\34\1\0\23\34\1\337\6\34\1\0\23\34"+
    "\1\u011d\6\34\1\0\2\34\1\233\27\34\1\0\21\34"+
    "\1\210\10\34\1\0\7\34\1\u011e\22\34\1\0\14\34"+
    "\1\332\15\34\1\0\14\34\1\240\15\34\1\0\7\34"+
    "\1\u010c\22\34\1\0\7\34\1\3\5\34\1\220\14\34"+
    "\1\0\5\34\1\u010c\24\34\1\0\15\34\1\220\14\34"+
    "\1\0\13\34\1\u011f\16\34\1\0\11\34\1\151\4\34"+
    "\1\331\13\34\1\0\11\34\1\151\20\34\1\0\7\34"+
    "\1\u0120\22\34\1\0\7\34\1\3\2\34\1\336\17\34"+
    "\1\0\23\34\1\240\6\34\1\0\5\34\1\210\24\34"+
    "\1\0\17\34\1\151\12\34\1\0\23\34\1\u0121\6\34"+
    "\1\0\17\34\1\3\12\34\1\0\12\34\1\237\4\34"+
    "\1\237\12\34\1\0\5\34\1\260\3\34\1\237\4\34"+
    "\1\3\13\34\1\0\10\34\1\223\6\34\1\237\12\34"+
    "\1\0\26\34\1\151\3\34\1\0\24\34\1\u0118\5\34"+
    "\1\0\24\34\1\3\5\34\1\0\12\34\1\u0122\17\34"+
    "\1\0\16\34\1\346\13\34\1\0\23\34\1\u0123\6\34"+
    "\1\0\2\34\1\u0124\27\34\1\0\12\34\1\u0125\17\34"+
    "\1\0\10\34\1\262\21\34\1\0\5\34\1\237\24\34"+
    "\1\0\12\34\1\252\17\34\1\0\16\34\1\u0126\13\34"+
    "\1\0\7\34\1\3\4\34\1\3\15\34\1\0\3\34"+
    "\1\261\26\34\1\0\1\34\1\u011c\30\34\1\0\22\34"+
    "\1\252\7\34\1\0\7\34\1\236\22\34\1\0\4\34"+
    "\1\u0127\13\34\1\237\11\34\1\0\20\34\1\262\11\34"+
    "\1\0\11\34\1\237\20\34\1\0\14\34\1\151\15\34"+
    "\1\0\11\34\1\210\20\34\1\0\11\34\1\3\1\51"+
    "\17\34\1\0\11\34\1\272\20\34\1\0\14\34\1\u0128"+
    "\15\34\1\0\7\34\1\u0129\22\34\1\0\14\34\1\151"+
    "\10\34\1\151\4\34\1\0\22\34\1\212\7\34\1\0"+
    "\14\34\1\223\15\34\1\0\3\34\1\51\26\34\1\0"+
    "\1\34\1\u012a\30\34\1\0\11\34\1\u010c\20\34\1\0"+
    "\11\34\1\u012b\20\34\1\0\16\34\1\310\13\34\1\0"+
    "\17\34\1\240\12\34\1\0\23\34\1\235\6\34\1\0"+
    "\11\34\1\u012c\20\34\1\0\26\34\1\210\3\34\1\0"+
    "\5\34\1\240\24\34\1\0\12\34\1\3\3\34\1\3"+
    "\13\34\1\0\17\34\1\u012d\12\34\1\0\11\34\1\u012e"+
    "\20\34\1\0\11\34\1\u012f\20\34\1\0\21\34\1\221"+
    "\10\34\1\0\7\34\1\u0102\22\34\1\0\12\34\1\u0130"+
    "\17\34\1\0\7\34\1\u0131\22\34\1\0\6\34\1\56"+
    "\23\34\1\0\3\34\1\u0132\11\34\1\225\14\34\1\0"+
    "\15\34\1\u0133\14\34\1\0\1\34\1\u0134\30\34\1\0"+
    "\17\34\1\u0135\12\34\1\0\7\34\1\361\22\34\1\0"+
    "\12\34\1\237\17\34\1\0\23\34\1\u0136\6\34\1\0"+
    "\13\34\1\227\16\34\1\0\15\34\1\u0137\14\34\1\0"+
    "\1\34\1\351\30\34\1\0\1\34\1\u0138\30\34\1\0"+
    "\13\34\1\3\16\34\1\0\7\34\1\u0139\22\34\1\0"+
    "\5\34\1\u013a\24\34\1\0\12\34\1\u013b\17\34\1\0"+
    "\11\34\1\u013c\20\34\1\0\4\34\1\51\25\34\1\0"+
    "\2\34\1\u013d\27\34\1\0\26\34\1\252\3\34\1\0"+
    "\7\34\1\267\22\34\1\0\16\34\1\u010c\13\34\1\0"+
    "\17\34\1\u010c\12\34\1\0\12\34\1\346\17\34\1\0"+
    "\1\34\1\u013e\30\34\1\0\1\34\1\74\30\34\1\0"+
    "\7\34\1\u013f\22\34\1\0\17\34\1\237\12\34\1\0"+
    "\16\34\1\51\13\34\1\0\16\34\1\335\13\34";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8289];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\u013d\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[319];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 114) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Yytoken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { return new Yytoken (yytext().toLowerCase(), yychar);
          }
        case 3: break;
        case 1: 
          { 
          }
        case 4: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
